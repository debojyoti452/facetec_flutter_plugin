import Flutter
import UIKit
import FaceTecSDK

public class FlutterFacetecSdkPlugin: NSObject, FlutterPlugin, URLSessionDelegate {
    var latestSessionResult: FaceTecSessionResult!
    var latestProcessor: Processor!
    
    public static func register(with registrar: FlutterPluginRegistrar) {
        let channel = FlutterMethodChannel(name: "flutter_facetec_sdk", binaryMessenger: registrar.messenger())
        let instance = FlutterFacetecSdkPlugin()
        registrar.addMethodCallDelegate(instance, channel: channel)
    }
    
    public func handle(_ call: FlutterMethodCall, result: @escaping FlutterResult) {
        switch call.method {
        case "getPlatformVersion":
            result("iOS " + UIDevice.current.systemVersion)
        case "initialize":
            initialize()
            result("success")
            
        case "startLiveCheckProcess":
            startLiveCheckProcess()
            result("done")
            
        default:
            result(FlutterMethodNotImplemented)
        }
    }
    
    private func initialize() {
        // Initialize FaceTec SDK
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
            if(initializationSuccessful) {
                print("Initialized FaceTecSDK")
            } else {
                // Displays the FaceTec SDK Status to text field if init failed
                print("\(FaceTec.sdk.description(for: FaceTec.sdk.getStatus()))")
            }
        })
    }
    
    private func startLiveCheckProcess() {
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.
        if let rootViewController = UIApplication.shared.delegate?.window??.rootViewController {
            getSessionToken() { sessionToken in
                self.latestProcessor = LivenessCheckProcessor(sessionToken: sessionToken, fromViewController: rootViewController)
            }
        } else {
            print("view not found")
        }
        
        
    }
    
    func setLatestSessionResult(sessionResult: FaceTecSessionResult) {
        latestSessionResult = sessionResult
    }
    
    func onComplete() {
        if !self.latestProcessor.isSuccess() {
            // Reset the enrollment identifier.
            print("failed")
        }
    }
    
    func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
        
        let endpoint = Config.BaseURL + "/session-token"
        let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
        request.httpMethod = "GET"
        // Required parameters to interact with the FaceTec Managed Testing API.
        request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "X-User-Agent")

        let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
        let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            // Ensure the data object is not nil otherwise callback with empty dictionary.
            guard let data = data else {
                print("Exception raised while attempting HTTPS call 1.")
                return
            }
            if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as! [String: AnyObject] {
                if((responseJSONObj["sessionToken"] as? String) != nil) {
                    sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
                    return
                } else {
                    print("Exception raised while attempting HTTPS call 2. \(responseJSONObj)")
                }
            }
        })
        task.resume()
    }
}
